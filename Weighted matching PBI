If, after applying your 3-level matching hierarchy (1. PO + Plant, 2. PO + Material, 3. fallback logic like Material + Plant), there are still multiple matches, you should implement tie-breaker logic or mark the record as ambiguous for review. Here are a few options:

⸻

1. Prioritize based on Delivery Date proximity

Choose the internal line with the delivery date closest to the customer’s recorded date. You can add a column like:

DeliveryDateDiff = ABS(Days Between Internal Delivery Date and Customer Date)

Then keep only the match with the minimum date difference.

⸻

2. Use Quantity Matching Accuracy

If multiple records remain after date filtering, compare quantity differences and retain the one with the smallest delta between ordered and delivered quantities.

⸻

3. Flag for Manual Review

If none of the above rules yield a unique match, set a column like:

Match_Status = "Multiple Candidates - Review"

And surface these in a drill-through table in Power BI.

⸻

4. Implement Weighted Matching Score

Calculate a composite score that weights:
	•	Delivery date closeness (e.g., weight 0.5)
	•	Quantity match closeness (e.g., weight 0.3)
	•	PO item number match (if available, weight 0.2)

Keep the row with the highest score.

⸻

Great! Here’s a step-by-step Power Query implementation plan with a sample M code pattern to resolve cases where multiple matches occur, using a weighted scoring approach:

⸻

Step-by-Step Plan: Resolving Multiple Matches

1. Prepare Composite Key for Merging

In both InternalLines and CustomerLines queries, add a key for high-granularity matching:

= Table.AddColumn(Source, "CompositeKey", each [PO] & "_" & [Plant] & "_" & [Material])

2. Merge Internal and Customer Tables

Perform a left join on CompositeKey and expand customer fields (e.g., RequestedDate, OrderedQty).

= Table.NestedJoin(InternalLines, "CompositeKey", CustomerLines, "CompositeKey", "MergedCustomer", JoinKind.LeftOuter)
= Table.ExpandTableColumn(MergedTable, "MergedCustomer", {"RequestedDate", "OrderedQty", "DeliveredDate", "DeliveredQty"})



⸻

3. Create Scoring Columns for Each Candidate

Add calculated columns:

a) Delivery Date Proximity Score

= Table.AddColumn(MergedTable, "Score_DeliveryDate", each Number.Abs(Duration.Days([DeliveredDate] - [RequestedDate])))

Lower is better.

b) Quantity Match Score

= Table.AddColumn(PreviousStep, "Score_QtyDiff", each Number.Abs([DeliveredQty] - [OrderedQty]))



⸻

4. Create Weighted Matching Score

You can normalize and invert these scores to create a weighted score:

= Table.AddColumn(PreviousStep, "MatchingScore", each 
    (1 / (1 + [Score_DeliveryDate])) * 0.6 +
    (1 / (1 + [Score_QtyDiff])) * 0.4
)

	•	1 / (1 + score) inverts the value: smaller deltas = higher score.
	•	You can tweak the weights (0.6 and 0.4) as needed.

⸻

5. Group and Select Top Match

Group by original internal record ID (e.g., InternalRowID), then keep the row with the maximum MatchingScore:

Grouped = Table.Group(ScoredTable, {"InternalRowID"}, {
    {"TopMatch", each Table.FirstN(Table.Sort(_, {"MatchingScore", Order.Descending}), 1), type table}
})

Then expand the grouped result:

= Table.ExpandTableColumn(Grouped, "TopMatch", {...your desired fields...})



⸻

6. Flag Ambiguous Matches

Before grouping, if a row has multiple matches with the same score, you can add a flag:

= Table.AddColumn(PreviousStep, "IsAmbiguous", each 
    if List.Count(List.Distinct(Table.SelectRows(PreviousStep, (r) => r[InternalRowID] = [InternalRowID])[MatchingScore])) > 1 then "Yes" else "No")



⸻

let
    // 1. Load Internal and Customer tables
    Internal = YourInternalTable,  // Replace with actual query name
    Customer = YourCustomerTable,  // Replace with actual query name

    // 2. Create Composite Key in both tables
    InternalWithKey = Table.AddColumn(Internal, "CompositeKey", each [PO] & "_" & [Plant] & "_" & [Material]),
    CustomerWithKey = Table.AddColumn(Customer, "CompositeKey", each [PO] & "_" & [Plant] & "_" & [Material]),

    // 3. Merge tables on Composite Key
    Merged = Table.NestedJoin(InternalWithKey, "CompositeKey", CustomerWithKey, "CompositeKey", "CustomerMatch", JoinKind.LeftOuter),
    Expanded = Table.ExpandTableColumn(Merged, "CustomerMatch", {
        "RequestedDate", "OrderedQty", "CustomerPO", "CustomerPlant", "CustomerMaterial"
    }),

    // 4. Add scoring columns
    ScoreDate = Table.AddColumn(Expanded, "Score_DeliveryDate", each try Number.Abs(Duration.Days([DeliveredDate] - [RequestedDate])) otherwise null),
    ScoreQty = Table.AddColumn(ScoreDate, "Score_QtyDiff", each try Number.Abs([DeliveredQty] - [OrderedQty]) otherwise null),

    // 5. Calculate weighted matching score (0.6 for date, 0.4 for qty)
    Scored = Table.AddColumn(ScoreQty, "MatchingScore", each 
        try 
            (1 / (1 + [Score_DeliveryDate])) * 0.6 + 
            (1 / (1 + [Score_QtyDiff])) * 0.4
        otherwise null
    ),

    // 6. Group by Internal Line ID and keep the best match
    Grouped = Table.Group(Scored, {"InternalLineID"}, {
        {"TopMatch", each Table.FirstN(Table.Sort(_, {"MatchingScore", Order.Descending}), 1), type table}
    }),

    // 7. Expand the best match fields
    Final = Table.ExpandTableColumn(Grouped, "TopMatch", {
        "PO", "Plant", "Material", "RequestedDate", "DeliveredDate", "DeliveredQty", "OrderedQty", 
        "Score_DeliveryDate", "Score_QtyDiff", "MatchingScore"
    })
in
    Final

⸻

What to Change

Replace the placeholders:
	•	YourInternalTable – name of your internal shipment query
	•	YourCustomerTable – name of your unified customer data query
	•	InternalLineID – a unique ID per internal line, e.g., PO+Line or Row Number
	•	Add/remove fields in the ExpandTableColumn step as needed.

AAAAAAAAAAAA


Great — here’s the first matching plan specifically for Mars and Nestlé, which avoids Plant and PO Line Number, and instead uses PO Number, Line Count Matching, and a Weighted Quantity Similarity.

⸻

Matching Plan 1: Mars and Nestlé

1. Base Matching Key
	•	Join on PO Number only.

2. Enrich with Line Counts
	•	For each PO in both tables:
	•	Add a column PO_LineCount_Internal (count of how many times each PO appears in internal table).
	•	Add a column PO_LineCount_Customer (same, from customer table).
	•	After joining, compute a column like:

LineCountMatchScore = if [PO_LineCount_Internal] = [PO_LineCount_Customer] then 1 else 0


	•	Or make it fuzzy with:

LineCountSimilarity = 1 - Number.Abs([PO_LineCount_Internal] - [PO_LineCount_Customer]) / Number.Max([PO_LineCount_Internal], [PO_LineCount_Customer])



3. Quantity Similarity Scoring
	•	After merging internal and customer rows with the same PO:
	•	Add this scoring column:

QuantitySimilarity = 1 - Number.Abs([DeliveredQty_Internal] - [OrderedQty_Customer]) / Number.Max([DeliveredQty_Internal], [OrderedQty_Customer])

This returns a value between 0 and 1: higher means closer match.

4. Total Matching Score
	•	Combine scores into a weighted match:

MatchingScore = 
    0.6 * QuantitySimilarity +
    0.4 * LineCountSimilarity

(Adjust weights as needed.)

	•	For each internal line, keep the customer row with the highest MatchingScore.

⸻

Data Flow Summary

Step	Action
1	Add PO_LineCount columns to both tables via grouping.
2	Merge internal and customer on PO number (many-to-many).
3	Add quantity similarity & line count match columns.
4	Compute a total score.
5	Keep best scoring row per internal line.



⸻

Next Steps

Would you like me to now:
	•	Draft a second matching plan for Unilever and Mondelez, or
	•	Generate the actual Power Query (M) code for this Mars/Nestlé plan?

Let me know your preference!


let
    // Load tables
    Internal = InternalData,  // Replace with your actual internal table name
    Customer = MarsNestleCustomer,  // Replace with unified Mars & Nestlé customer data

    // Step 1: Add PO line count to each table
    InternalWithCounts = Table.AddColumn(
        Internal,
        "PO_LineCount_Internal",
        each Table.RowCount(Table.SelectRows(Internal, (r) => r[PO] = [PO]))
    ),

    CustomerWithCounts = Table.AddColumn(
        Customer,
        "PO_LineCount_Customer",
        each Table.RowCount(Table.SelectRows(Customer, (r) => r[PO] = [PO]))
    ),

    // Step 2: Merge on PO only
    Merged = Table.NestedJoin(
        InternalWithCounts,
        "PO",
        CustomerWithCounts,
        "PO",
        "CustomerMatch",
        JoinKind.LeftOuter
    ),
    Expanded = Table.ExpandTableColumn(
        Merged,
        "CustomerMatch",
        {"PO", "Material", "OrderedQty", "DeliveredQty_Customer", "RequestedDate", "PO_LineCount_Customer"},
        {"PO_Cust", "Material_Cust", "OrderedQty", "DeliveredQty_Customer", "RequestedDate", "PO_LineCount_Customer"}
    ),

    // Step 3: Add Quantity Similarity Score
    WithQtySimilarity = Table.AddColumn(
        Expanded,
        "QuantitySimilarity",
        each try 1 - Number.Abs([DeliveredQty_Internal] - [OrderedQty]) / Number.Max([DeliveredQty_Internal], [OrderedQty]) otherwise null
    ),

    // Step 4: Add Line Count Similarity Score
    WithLineCountSimilarity = Table.AddColumn(
        WithQtySimilarity,
        "LineCountSimilarity",
        each try 
            1 - Number.Abs([PO_LineCount_Internal] - [PO_LineCount_Customer]) / Number.Max([PO_LineCount_Internal], [PO_LineCount_Customer]) 
        otherwise null
    ),

    // Step 5: Composite Match Score
    Scored = Table.AddColumn(
        WithLineCountSimilarity,
        "MatchingScore",
        each try [QuantitySimilarity] * 0.6 + [LineCountSimilarity] * 0.4 otherwise null
    ),

    // Step 6: Group and select top-scoring match per Internal Line ID (assumes you have a unique key like Row ID)
    Grouped = Table.Group(
        Scored,
        {"InternalRowID"},  // Replace with your unique internal row ID column
        {
            {"BestMatch", each Table.FirstN(Table.Sort(_, {"MatchingScore", Order.Descending}), 1), type table}
        }
    ),

    Final = Table.ExpandTableColumn(Grouped, "BestMatch", {
        "PO", "Material", "DeliveredQty_Internal", "OrderedQty", "QuantitySimilarity", 
        "LineCountSimilarity", "MatchingScore", "RequestedDate", "PO_LineCount_Internal", "PO_LineCount_Customer"
    })
in
    Final


Placeholder
Replace With
InternalData
Actual query name for internal lines
MarsNestleCustomer
Merged table of Mars + Nestlé lines
DeliveredQty_Internal
Delivered quantity column in internal table
InternalRowID
A unique row identifier for internal lines (e.g. PO + Material or row index)


BBBBBBBBBB

// Function: Match internal and customer lines by PO number, line count, and quantity similarity
let
    fnMatchByPOQuantityScore = (internalTable as table, customerTable as table, optional internalRowIDCol as text) as table =>
    let
        // Validate optional row ID column
        InternalWithID = if internalRowIDCol <> null then
            Table.AddColumn(internalTable, "InternalRowID", each Record.Field(_, internalRowIDCol))
        else
            Table.AddIndexColumn(internalTable, "InternalRowID", 1, 1, Int64.Type),

        // Step 1: Add PO line count to each table
        InternalWithCounts = Table.AddColumn(
            InternalWithID,
            "PO_LineCount_Internal",
            each Table.RowCount(Table.SelectRows(InternalWithID, (r) => r[PO] = [PO]))
        ),

        CustomerWithCounts = Table.AddColumn(
            customerTable,
            "PO_LineCount_Customer",
            each Table.RowCount(Table.SelectRows(customerTable, (r) => r[PO] = [PO]))
        ),

        // Step 2: Merge on PO only
        Merged = Table.NestedJoin(
            InternalWithCounts,
            "PO",
            CustomerWithCounts,
            "PO",
            "CustomerMatch",
            JoinKind.LeftOuter
        ),
        Expanded = Table.ExpandTableColumn(
            Merged,
            "CustomerMatch",
            {"PO", "Material", "OrderedQty", "DeliveredQty", "RequestedDate", "PO_LineCount_Customer"},
            {"PO_Cust", "Material_Cust", "OrderedQty", "DeliveredQty_Customer", "RequestedDate", "PO_LineCount_Customer"}
        ),

        // Step 3: Add Quantity Similarity Score
        WithQtySimilarity = Table.AddColumn(
            Expanded,
            "QuantitySimilarity",
            each try 1 - Number.Abs([DeliveredQty] - [OrderedQty]) / Number.Max([DeliveredQty], [OrderedQty]) otherwise null
        ),

        // Step 4: Add Line Count Similarity Score
        WithLineCountSimilarity = Table.AddColumn(
            WithQtySimilarity,
            "LineCountSimilarity",
            each try 
                1 - Number.Abs([PO_LineCount_Internal] - [PO_LineCount_Customer]) / Number.Max([PO_LineCount_Internal], [PO_LineCount_Customer]) 
            otherwise null
        ),

        // Step 5: Composite Matching Score
        Scored = Table.AddColumn(
            WithLineCountSimilarity,
            "MatchingScore",
            each try [QuantitySimilarity] * 0.6 + [LineCountSimilarity] * 0.4 otherwise null
        ),

        // Step 6: Group and keep top match per Internal Line
        Grouped = Table.Group(
            Scored,
            {"InternalRowID"},
            {
                {"BestMatch", each Table.FirstN(Table.Sort(_, {"MatchingScore", Order.Descending}), 1), type table}
            }
        ),

        Final = Table.ExpandTableColumn(Grouped, "BestMatch", {
            "PO", "Material", "DeliveredQty", "OrderedQty", "QuantitySimilarity", 
            "LineCountSimilarity", "MatchingScore", "RequestedDate", "PO_LineCount_Internal", "PO_LineCount_Customer"
        })
    in
        Final
in
    fnMatchByPOQuantityScore





TO CALL IT


let
    MatchedTable = fnMatchByPOQuantityScore(InternalData, MarsNestleCustomer, "RowID")  // Replace names & ID column
in
    MatchedTable
